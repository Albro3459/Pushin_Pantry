@page "/allRecipes"

@layout MainLayout

<link href="/css/cards.css" rel="stylesheet" />
<link href="/css/allRecipes.css" rel="stylesheet" />

<head>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.x/css/bootstrap.min.css" rel="stylesheet">
    <style>
        #carouselControls {
            width: 80%;
            margin-top: 50px;
            margin-right: auto;
            margin-left: auto;
            height: 350px;
            position: relative;
        }

        .carousel-item img {
            @* height: 100%; *@
            max-width: 100%;
            max-height: 350px;
            height: auto;
            border: 1px solid #ccc;
            border-radius: 0.5rem; /* Standard Bootstrap border-radius for cards */
            object-fit: cover;
        }

        .carousel-control-prev,
        .carousel-control-next {
            width: 5%;
        }

        .carousel-control-prev-icon,
        .carousel-control-next-icon {
        background-color: transparent; /* Set initial background to transparent */
        border-radius: 50%;
        padding: 10px;
        transition: background-color 0.3s; /* Smooth transition for background color change */
        }

        .carousel-control-prev:hover .carousel-control-prev-icon,
        .carousel-control-next:hover .carousel-control-next-icon {
            background-color: #000; /* Change background color on hover */
        }
    </style>
</head>




<div style="height: 0.5in;"></div>
<div class="container ">
    <div class="row justify-content-center"> <!-- Ensures the column below is centered -->
        <div class="container">
            <div class="row justify-content-center"> <!-- Ensures the column below is centered -->
                <div class="col-md-8">
                    <div id="carouselControls" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-inner">
                            <div class="carousel-item active">
                                <img src="/RecipeImages/chicken_fried_rice_detailed.jpg" class="d-block w-100"
                                    alt="...">
                            </div>
                            <div class="carousel-item">
                                <img src="/RecipeImages/chicken_parmesan_detailed.jpg" class="d-block w-100" alt="...">
                            </div>
                            <div class="carousel-item">
                                <img src="/RecipeImages/chicken_veggie_rice_stirfry_detailed.jpg" class="d-block w-100"
                                    alt="...">
                            </div>
                        </div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#carouselControls"
                            data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#carouselControls"
                            data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-10">
                <div class="container mt-4">
                    @* <div class="col-md-10"> *@
                        <form @onsubmit="HandleFormSubmit">
                            <div class="row">
                                <div class="col-md-4 d-flex justify-content-center align-items-center">
                                    <h2>All Recipes</h2>
                                </div>
                                <div class="col-md-2"></div> <!-- Seems unused, consider removing if not needed -->
                                <div class="col-md-6 d-flex justify-content-end">
                                    @* <div class="row"> <!-- Added to properly contain the columns within it --> *@
                                    <div class="col-md-8">
                                        <select id="restriction-multi-select" class="form-select" multiple
                                            data-placeholder="Select Restrictions" @onchange="HandleRestrictionsChange">
                                            @foreach (var restriction in AllRestrictions)
                                            {
                                                <option value="@restriction.RestrictionID">@restriction.RestrictionName</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <button type="submit" class="btn btn-primary">Search</button>
                                    </div>
                                    @* </div> *@
                                </div>
                            </div>
                        </form>
                        @if (recipes == null)
                        {
                            <p>Loading recipes...</p>
                        }
                        else if (clicked && recipes.Count == 0)
                        {
                            <h4 class="no-recipes-message mt-2">No recipes found :(</h4>
                        }
                        else
                        {
                            <div class="row mt-4">
                                @foreach (var recipe in recipes)
                                {
                                    <div class="col-sm-4">
                                        <div class="card mb-4 shadow-sm clickable-card">
                                            <img src="@($"RecipeImages/{recipe.RecipeImage}_thumb.jpg")" alt="Image of @recipe.RecipeName"
                                                class="recipeImage">
                                            <div class="card-body">
                                                <NavLink @onclick="() => RedirectToRecipe(recipe.RecipeID)">
                                                    <h5 class="card-title clickable-card-title">@recipe.RecipeName</h5>
                                                </NavLink>
                                                <p class="card-text">@recipe.ShortDescription</p>
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <small class="text-muted mt-1">@Math.Round(recipe.CookTime) Minutes</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    @* </div> *@
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private List<SimpleRecipeDTO> recipes = new();
    private bool clicked = false;
    private List<RestrictionDTO> AllRestrictions = new List<RestrictionDTO>();
    private List<int> RestrictionIDs = new();
    private RestrictionSelectionDTO SelectedRestrictions = new RestrictionSelectionDTO();

    protected void RedirectToRecipe(int recipeID)
    {
        string recipeLink = $"/detailedRecipe/{recipeID}";
        NavigationManager.NavigateTo(recipeLink);
    }

    protected async Task SearchRecipes()
    {
        clicked = true;
        try
        {
            // Filtering out recipes

            if (SelectedRestrictions.RestrictionIds.Count > 0)
            {
                Console.WriteLine($"Restrictions");
                recipes = await RecipeService.GetRecipesByRestrictions(SelectedRestrictions.RestrictionIds);
            }
            else
            {
                Console.WriteLine($"SearchAll");
                recipes = await RecipeService.GetAllSimpleRecipes();
            }


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching recipes: {ex.Message}");
            // Probably need to make a UI alert for errors
        }

    }

    private void GetRestrictionsIDtoList(List<RestrictionDTO> AllRestrictions)
    {
        if (AllRestrictions.Count != 0)
        {

            foreach (var restriction in AllRestrictions)
            {
                RestrictionIDs.Add(restriction.RestrictionID);
            }
        }
    }

    protected async Task HandleFormSubmit()
    {
        await SearchRecipes();
    }

    private void HandleRestrictionsChange(ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string>;
        if (selectedOptions != null)
        {
            // Clear the existing list
            SelectedRestrictions.RestrictionIds.Clear();

            foreach (var option in selectedOptions)
            {
                if (int.TryParse(option, out var id))
                {
                    SelectedRestrictions.RestrictionIds.Add(id);
                }
                else
                {
                    Console.WriteLine($"Failed to parse restriction ID: {option}");
                }
            }

            Console.WriteLine($"Selected Restrictions: {string.Join(", ", SelectedRestrictions.RestrictionIds)}");
        }

        @* await SearchRecipes(); *@
    }

    protected override async Task OnInitializedAsync()
    {
        await GetRestrictions();
        await GetRecipes();
    }

    protected async Task GetRecipes()
    {
        try
        {
            recipes = await RecipeService.GetAllSimpleRecipes();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching recipes: {ex.Message}");
        }
    }
    protected async Task GetRestrictions()
    {
        try
        {
            AllRestrictions = await RestrictionService.GetAllRestrictions();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching restrictions: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var options = new
            {
                theme = "bootstrap-5",
                width = "style",
                placeholder = "Select Restrictions",
                closeOnSelect = false,
            };
            await JS.InvokeVoidAsync("eval", @"
$('#restriction-multi-select').select2(" + System.Text.Json.JsonSerializer.Serialize(options) + @");
$('#restriction-multi-select').on('select2:select select2:unselect', function (e) {
// Manually trigger change event for Blazor to capture
this.dispatchEvent(new Event('change'));
});"
            );
        }
    }


}