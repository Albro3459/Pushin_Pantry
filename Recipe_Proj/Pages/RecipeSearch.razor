@page "/recipeSearch"

@layout MainLayout

<link href="/css/cards.css" rel="stylesheet" />
<style>
    html, body{
        height: 100%;
    }
    body {
        background-image: url('/images/brooke-lark-jUPOXXRNdcA-unsplash.jpg'); 
        background-size: cover;
        background-position: center 20%;
        background-repeat: no-repeat;
        background-color: #f8f9fa;
        margin: 0 auto 20px;
        padding: 20px;
    }
    .textFont {
        font-weight: normal;
        font-size: 50px;
        color: black;
        text-align: center;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .centered-container {
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
        flex-direction: column; 
        margin: 0 auto; 
        padding: 20px; 
        box-sizing: border-box; 

    }

    .shadowww {
        margin: 0 auto 20px; 
        padding: 10px; 
        background-color: rgba(255, 255, 255, 0.5); 
        backdrop-filter: blur(5px);
        border-radius: 10px;
    }

    .h1_Width {
        max-width: 800px;
    }

    .no-recipes-message {
        font-weight: bold;
        color: white; 
        text-align: center;
        text-shadow: 
            -.5px -.5px 0 #000000,  
            .5px -.5px 0 #000000,
            -.5px .5px 0 #000000,
            .5px .5px 0 #000000;
    }
</style>


<div style="height: 1in;"></div>
<div class="centered-container">
  <h1 class="textFont shadowww h1_Width">Discover Delicious Recipes!</h1>
</div>
<div class="container mt-3">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <form @onsubmit="HandleFormSubmit">
                <div class="container">
                    <div class="row justify-content-center">
                        <div class="col-md-1"></div>
                        <div class="col-md-11">
                            <div class="input-group mb-2">
                                <div class="col-md-1"></div>
                                <div class="col-lg-2">
                                    <select id="restriction-multi-select" class="form-select" multiple
                                        data-placeholder="Select Restrictions" @onchange="HandleRestrictionsChange">
                                        @foreach (var restriction in AllRestrictions)
                                        {
                                            <option value="@restriction.RestrictionID">@restriction.RestrictionName</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <input type="text" class="form-control" @bind='searchKeywords'
                                        placeholder="Search for recipes...">
                                </div>

                                <div class="col-md-3">
                                    <button type="submit" class="btn btn-primary">Search</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
            @if (waiting == true || recipes == null)
            {
                <h4 class="no-recipes-message mt-5">Loading recipes...</h4>
            }
            else if (clicked && recipes.Count == 0)
            {
                <h4 class="no-recipes-message mt-5">No recipes found :(</h4>
            }
            else
            {
                <div class="row mt-2">
                    @foreach (var recipe in recipes)
                    {
                        <div class="col-sm-4">
                            <div class="card mb-4 shadow-sm clickable-card">
                                <NavLink @onclick="() => RedirectToRecipe(recipe.RecipeID)">
                                    <img src="@($"RecipeImages/{recipe.RecipeImage}_thumb.jpg")" alt="Image of @recipe.RecipeName"
                                        class="recipeImage">
                                </NavLink>
                                <div class="card-body">
                                    <NavLink @onclick="() => RedirectToRecipe(recipe.RecipeID)">
                                        <h5 class="card-title clickable-card-title">@recipe.RecipeName</h5>
                                    </NavLink>
                                    <p class="card-text">@recipe.ShortDescription</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted mt-1">@Math.Round(recipe.CookTime) Minutes</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {

    private List<SimpleRecipeDTO> recipes = new();
    public string searchKeywords = string.Empty;
    public bool clicked = false;

    public bool waiting = false;

    protected void RedirectToRecipe(int recipeID) {
        string recipeLink = $"/detailedRecipe/{recipeID}";
        NavigationManager.NavigateTo(recipeLink);
    }

    protected async Task SearchRecipes()
    {
        clicked = true;
        waiting = true;

        

        if (searchKeywords == string.Empty) {
            recipes = new();
            await GetRestrictions();
            if (SelectedRestrictions.RestrictionIds.Count > 0) {
                await GetRecipesByRestrictions(SelectedRestrictions.RestrictionIds);
            }
        }
        else {
            try
            {

                await GetRestrictions(searchKeywords);

                if (SelectedRestrictions.RestrictionIds != null)
                {
                    if (SelectedRestrictions.RestrictionIds.Count > 0)
                    {
                        recipes = await RecipeService.SearchRecipesWithRestrictions(searchKeywords, SelectedRestrictions.RestrictionIds);
                    }
                    else
                    {
                        recipes = await RecipeService.SearchRecipesByKeywords(searchKeywords);
                    }
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching recipes: {ex.Message}");
            }
        }
    }

    protected async Task HandleFormSubmit()
    {
        await SearchRecipes();
        waiting = false;
    }

    private List<RestrictionDTO> AllRestrictions = new List<RestrictionDTO>();
    private RestrictionSelectionDTO SelectedRestrictions = new RestrictionSelectionDTO();


    private void HandleRestrictionsChange(ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string>;
        if (selectedOptions != null)
        {
            SelectedRestrictions.RestrictionIds.Clear();

            foreach (var option in selectedOptions)
            {
                if (int.TryParse(option, out var id))
                {
                    SelectedRestrictions.RestrictionIds.Add(id);
                }
                else
                {
                    Console.WriteLine($"Failed to parse restriction ID: {option}");
                }
            }

            Console.WriteLine($"Selected Restrictions: {string.Join(", ", SelectedRestrictions.RestrictionIds)}");
        }

    }

    protected async Task GetRecipesByRestrictions(List<int> restrictionsIDs)
    {
        try
        {
            recipes = await RecipeService.GetRecipesByRestrictions(restrictionsIDs);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching recipes: {ex.Message}");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await GetRestrictions();
    }

    protected async Task GetRestrictions()
    {
        try
        {
            AllRestrictions = await RestrictionService.GetAllRestrictions();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching restrictions: {ex.Message}");
        }
    }

    protected async Task GetRestrictions(string searchKeywords)
    {
        try
        {
            AllRestrictions = await RestrictionService.GetAllActiveByRecipes(searchKeywords);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching restrictions: {ex.Message}");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var options = new
            {
                theme = "bootstrap-5",
                width = "style",
                placeholder = "Select Restrictions",
                closeOnSelect = false,
            };
            await JS.InvokeVoidAsync("eval", @"
                    $('#restriction-multi-select').select2(" + System.Text.Json.JsonSerializer.Serialize(options) + @");
                    $('#restriction-multi-select').on('select2:select select2:unselect', function (e) {
                    // Manually trigger change event for Blazor to capture
                    this.dispatchEvent(new Event('change'));
                    });"
            );
        }
    }
}
